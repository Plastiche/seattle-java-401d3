/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class App {

    public static void main(String[] args) {

        Flower f = new Flower("Bract");

        f.pet = new Rock("Rocky");

        System.out.println(f.pet);

        f.pet.numOfDiamonds = 2;

        System.out.println(f.pet.numOfDiamonds);

        Rock rocky = f.pet;
        f.pet = new Rock("Rocko");

        System.out.println(f.pet);
        System.out.println(rocky);

        doDomething(rocky);
        System.out.println(rocky);

        addDiamonds(rocky);
        System.out.println(rocky.numOfDiamonds);
    }

    public static void quickBigO() {
        int[] myFancyArray = new int[10];

        // O(1)
        int x = myFancyArray[2];

        // O(n)
        for (int i : myFancyArray) {
            System.out.println(i);
        }

        // time: O(n^2)
        // size: O(n)
        HashSet<Integer> set = new HashSet<>();
        for (int i : myFancyArray) {
            for (int j : myFancyArray) {
                set.add(i);
                System.out.println(j);
            }
        }
    }

    public static void doDomething(Rock r) {
        // it passed in the ref address, not the actual ref
        // so r is _not_ r1 that was passed in.
        // it's a copy of the reference

        // when we reassign, Rocker will be lost and eventually eaten by the garbage collector
        r = new Rock("Rocker");
    }

    public static void addDiamonds(Rock r) {
        // In this case, we access r and it's the same address as what was passed in
        // so when we change the properties, they _do_ change.
        r.numOfDiamonds++;
    }

    public static void doDomethingFinal(final Rock r) {
        // same as before, but by labeling rock as "final"
        // the compiler will keep you from trying to reassign.

        // r = new Rock("Rocker");  // compile error
        r.numOfDiamonds = 10; // but this still works
    }

    public static void reviewStuff() {
        Path path = Paths.get("names.txt");

        try (BufferedReader reader = Files.newBufferedReader(path)) {
//            List<String> lines = Files.readAllLines(path);
            String line = reader.readLine();
            while (line != null) {
                line = reader.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        ArrayList<String> list = new ArrayList<>();

        list.add("Hello");

        List<String> listconcept = list;

        list.remove("Hello");
        list.size();

        for (String item : list) {
        }
    }
}
